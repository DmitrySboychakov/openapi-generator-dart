// Mocks generated by Mockito 5.4.2 from annotations
// in openapi_generator/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i17;
import 'dart:io' as _i12;

import 'package:analyzer/dart/constant/value.dart' as _i3;
import 'package:analyzer/dart/element/element.dart' as _i6;
import 'package:analyzer/dart/element/nullability_suffix.dart' as _i19;
import 'package:analyzer/dart/element/type.dart' as _i4;
import 'package:analyzer/src/generated/engine.dart' as _i10;
import 'package:analyzer/src/generated/source.dart' as _i11;
import 'package:build/build.dart' as _i5;
import 'package:crypto/crypto.dart' as _i9;
import 'package:glob/glob.dart' as _i18;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i16;
import 'package:openapi_generator/src/models/command.dart' as _i15;
import 'package:openapi_generator/src/models/generator_arguments.dart' as _i14;
import 'package:openapi_generator/src/openapi_generator_runner.dart' as _i13;
import 'package:package_config/package_config_types.dart' as _i7;
import 'package:source_gen/source_gen.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTypeChecker_0 extends _i1.SmartFake implements _i2.TypeChecker {
  _FakeTypeChecker_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDartObject_1 extends _i1.SmartFake implements _i3.DartObject {
  _FakeDartObject_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSymbol_2 extends _i1.SmartFake implements Symbol {
  _FakeSymbol_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDartType_3 extends _i1.SmartFake implements _i4.DartType {
  _FakeDartType_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConstantReader_4 extends _i1.SmartFake
    implements _i2.ConstantReader {
  _FakeConstantReader_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRevivable_5 extends _i1.SmartFake implements _i2.Revivable {
  _FakeRevivable_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssetId_6 extends _i1.SmartFake implements _i5.AssetId {
  _FakeAssetId_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLibraryElement_7 extends _i1.SmartFake
    implements _i6.LibraryElement {
  _FakeLibraryElement_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResolver_8 extends _i1.SmartFake implements _i5.Resolver {
  _FakeResolver_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePackageConfig_9 extends _i1.SmartFake implements _i7.PackageConfig {
  _FakePackageConfig_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_10<T1> extends _i1.SmartFake implements _i8.Future<T1> {
  _FakeFuture_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDigest_11 extends _i1.SmartFake implements _i9.Digest {
  _FakeDigest_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMethodElement_12 extends _i1.SmartFake implements _i6.MethodElement {
  _FakeMethodElement_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElement_13 extends _i1.SmartFake implements _i6.Element {
  _FakeElement_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnalysisContext_14 extends _i1.SmartFake
    implements _i10.AnalysisContext {
  _FakeAnalysisContext_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElementKind_15 extends _i1.SmartFake implements _i6.ElementKind {
  _FakeElementKind_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSource_16 extends _i1.SmartFake implements _i11.Source {
  _FakeSource_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFunctionType_17 extends _i1.SmartFake implements _i4.FunctionType {
  _FakeFunctionType_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAugmentedClassElement_18 extends _i1.SmartFake
    implements _i6.AugmentedClassElement {
  _FakeAugmentedClassElement_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompilationUnitElement_19 extends _i1.SmartFake
    implements _i6.CompilationUnitElement {
  _FakeCompilationUnitElement_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterfaceType_20 extends _i1.SmartFake implements _i4.InterfaceType {
  _FakeInterfaceType_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSink_21 extends _i1.SmartFake implements _i12.IOSink {
  _FakeIOSink_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OpenapiGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenapiGenerator extends _i1.Mock implements _i13.OpenapiGenerator {
  @override
  bool get testMode => (super.noSuchMethod(
        Invocation.getter(#testMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.TypeChecker get typeChecker => (super.noSuchMethod(
        Invocation.getter(#typeChecker),
        returnValue: _FakeTypeChecker_0(
          this,
          Invocation.getter(#typeChecker),
        ),
        returnValueForMissingStub: _FakeTypeChecker_0(
          this,
          Invocation.getter(#typeChecker),
        ),
      ) as _i2.TypeChecker);
  @override
  _i8.FutureOr<String> generateForAnnotatedElement(
    _i6.Element? element,
    _i2.ConstantReader? annotations,
    _i5.BuildStep? buildStep,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateForAnnotatedElement,
          [
            element,
            annotations,
            buildStep,
          ],
        ),
        returnValue: _i8.Future<String>.value(''),
        returnValueForMissingStub: _i8.Future<String>.value(''),
      ) as _i8.FutureOr<String>);
  @override
  _i8.Future<void> runOpenApiJar(
          {required _i14.GeneratorArguments? arguments}) =>
      (super.noSuchMethod(
        Invocation.method(
          #runOpenApiJar,
          [],
          {#arguments: arguments},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.FutureOr<String> generatorV2({
    required _i14.GeneratorArguments? args,
    required String? baseCommand,
    required String? annotatedPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generatorV2,
          [],
          {
            #args: args,
            #baseCommand: baseCommand,
            #annotatedPath: annotatedPath,
          },
        ),
        returnValue: _i8.Future<String>.value(''),
        returnValueForMissingStub: _i8.Future<String>.value(''),
      ) as _i8.FutureOr<String>);
  @override
  _i8.FutureOr<bool> hasDiff({required _i14.GeneratorArguments? args}) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasDiff,
          [],
          {#args: args},
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.FutureOr<bool>);
  @override
  _i8.FutureOr<void> generateSources({
    required String? baseCommand,
    required _i14.GeneratorArguments? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateSources,
          [],
          {
            #baseCommand: baseCommand,
            #args: args,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.FutureOr<void>);
  @override
  _i8.Future<void> runSourceGen({
    required String? baseCommand,
    required _i14.GeneratorArguments? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runSourceGen,
          [],
          {
            #baseCommand: baseCommand,
            #args: args,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.FutureOr<void> fetchDependencies({
    required String? baseCommand,
    required _i14.GeneratorArguments? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDependencies,
          [],
          {
            #baseCommand: baseCommand,
            #args: args,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.FutureOr<void>);
  @override
  _i8.Future<void> updateCachedSpec({
    required Map<String, dynamic>? updatedSpec,
    required String? cachedPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCachedSpec,
          [],
          {
            #updatedSpec: updatedSpec,
            #cachedPath: cachedPath,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> updateAnnotatedFile({required dynamic annotatedPath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAnnotatedFile,
          [],
          {#annotatedPath: annotatedPath},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> formatCode({required _i14.GeneratorArguments? args}) =>
      (super.noSuchMethod(
        Invocation.method(
          #formatCode,
          [],
          {#args: args},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i12.ProcessResult> runExternalProcess({
    required _i15.Command? command,
    required String? workingDirectory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runExternalProcess,
          [],
          {
            #command: command,
            #workingDirectory: workingDirectory,
          },
        ),
        returnValue: _i8.Future<_i12.ProcessResult>.value(
            _i16.dummyValue<_i12.ProcessResult>(
          this,
          Invocation.method(
            #runExternalProcess,
            [],
            {
              #command: command,
              #workingDirectory: workingDirectory,
            },
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i12.ProcessResult>.value(
            _i16.dummyValue<_i12.ProcessResult>(
          this,
          Invocation.method(
            #runExternalProcess,
            [],
            {
              #command: command,
              #workingDirectory: workingDirectory,
            },
          ),
        )),
      ) as _i8.Future<_i12.ProcessResult>);
  @override
  _i8.FutureOr<String> generate(
    _i2.LibraryReader? library,
    _i5.BuildStep? buildStep,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generate,
          [
            library,
            buildStep,
          ],
        ),
        returnValue: _i8.Future<String>.value(''),
        returnValueForMissingStub: _i8.Future<String>.value(''),
      ) as _i8.FutureOr<String>);
}

/// A class which mocks [ConstantReader].
///
/// See the documentation for Mockito's code generation for more information.
class MockConstantReader extends _i1.Mock implements _i2.ConstantReader {
  @override
  bool get isLiteral => (super.noSuchMethod(
        Invocation.getter(#isLiteral),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.DartObject get objectValue => (super.noSuchMethod(
        Invocation.getter(#objectValue),
        returnValue: _FakeDartObject_1(
          this,
          Invocation.getter(#objectValue),
        ),
        returnValueForMissingStub: _FakeDartObject_1(
          this,
          Invocation.getter(#objectValue),
        ),
      ) as _i3.DartObject);
  @override
  bool get isNull => (super.noSuchMethod(
        Invocation.getter(#isNull),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isBool => (super.noSuchMethod(
        Invocation.getter(#isBool),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get boolValue => (super.noSuchMethod(
        Invocation.getter(#boolValue),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isInt => (super.noSuchMethod(
        Invocation.getter(#isInt),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get intValue => (super.noSuchMethod(
        Invocation.getter(#intValue),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get isDouble => (super.noSuchMethod(
        Invocation.getter(#isDouble),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  double get doubleValue => (super.noSuchMethod(
        Invocation.getter(#doubleValue),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  bool get isString => (super.noSuchMethod(
        Invocation.getter(#isString),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  String get stringValue => (super.noSuchMethod(
        Invocation.getter(#stringValue),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool get isSymbol => (super.noSuchMethod(
        Invocation.getter(#isSymbol),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  Symbol get symbolValue => (super.noSuchMethod(
        Invocation.getter(#symbolValue),
        returnValue: _FakeSymbol_2(
          this,
          Invocation.getter(#symbolValue),
        ),
        returnValueForMissingStub: _FakeSymbol_2(
          this,
          Invocation.getter(#symbolValue),
        ),
      ) as Symbol);
  @override
  bool get isType => (super.noSuchMethod(
        Invocation.getter(#isType),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.DartType get typeValue => (super.noSuchMethod(
        Invocation.getter(#typeValue),
        returnValue: _FakeDartType_3(
          this,
          Invocation.getter(#typeValue),
        ),
        returnValueForMissingStub: _FakeDartType_3(
          this,
          Invocation.getter(#typeValue),
        ),
      ) as _i4.DartType);
  @override
  bool get isMap => (super.noSuchMethod(
        Invocation.getter(#isMap),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  Map<_i3.DartObject?, _i3.DartObject?> get mapValue => (super.noSuchMethod(
        Invocation.getter(#mapValue),
        returnValue: <_i3.DartObject?, _i3.DartObject?>{},
        returnValueForMissingStub: <_i3.DartObject?, _i3.DartObject?>{},
      ) as Map<_i3.DartObject?, _i3.DartObject?>);
  @override
  bool get isList => (super.noSuchMethod(
        Invocation.getter(#isList),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i3.DartObject> get listValue => (super.noSuchMethod(
        Invocation.getter(#listValue),
        returnValue: <_i3.DartObject>[],
        returnValueForMissingStub: <_i3.DartObject>[],
      ) as List<_i3.DartObject>);
  @override
  bool get isSet => (super.noSuchMethod(
        Invocation.getter(#isSet),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  Set<_i3.DartObject> get setValue => (super.noSuchMethod(
        Invocation.getter(#setValue),
        returnValue: <_i3.DartObject>{},
        returnValueForMissingStub: <_i3.DartObject>{},
      ) as Set<_i3.DartObject>);
  @override
  bool instanceOf(_i2.TypeChecker? checker) => (super.noSuchMethod(
        Invocation.method(
          #instanceOf,
          [checker],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.ConstantReader read(String? field) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [field],
        ),
        returnValue: _FakeConstantReader_4(
          this,
          Invocation.method(
            #read,
            [field],
          ),
        ),
        returnValueForMissingStub: _FakeConstantReader_4(
          this,
          Invocation.method(
            #read,
            [field],
          ),
        ),
      ) as _i2.ConstantReader);
  @override
  _i2.ConstantReader? peek(String? field) => (super.noSuchMethod(
        Invocation.method(
          #peek,
          [field],
        ),
        returnValueForMissingStub: null,
      ) as _i2.ConstantReader?);
  @override
  _i2.Revivable revive() => (super.noSuchMethod(
        Invocation.method(
          #revive,
          [],
        ),
        returnValue: _FakeRevivable_5(
          this,
          Invocation.method(
            #revive,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRevivable_5(
          this,
          Invocation.method(
            #revive,
            [],
          ),
        ),
      ) as _i2.Revivable);
}

/// A class which mocks [BuildStep].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildStep extends _i1.Mock implements _i5.BuildStep {
  @override
  _i5.AssetId get inputId => (super.noSuchMethod(
        Invocation.getter(#inputId),
        returnValue: _FakeAssetId_6(
          this,
          Invocation.getter(#inputId),
        ),
        returnValueForMissingStub: _FakeAssetId_6(
          this,
          Invocation.getter(#inputId),
        ),
      ) as _i5.AssetId);
  @override
  _i8.Future<_i6.LibraryElement> get inputLibrary => (super.noSuchMethod(
        Invocation.getter(#inputLibrary),
        returnValue: _i8.Future<_i6.LibraryElement>.value(_FakeLibraryElement_7(
          this,
          Invocation.getter(#inputLibrary),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.LibraryElement>.value(_FakeLibraryElement_7(
          this,
          Invocation.getter(#inputLibrary),
        )),
      ) as _i8.Future<_i6.LibraryElement>);
  @override
  _i5.Resolver get resolver => (super.noSuchMethod(
        Invocation.getter(#resolver),
        returnValue: _FakeResolver_8(
          this,
          Invocation.getter(#resolver),
        ),
        returnValueForMissingStub: _FakeResolver_8(
          this,
          Invocation.getter(#resolver),
        ),
      ) as _i5.Resolver);
  @override
  Iterable<_i5.AssetId> get allowedOutputs => (super.noSuchMethod(
        Invocation.getter(#allowedOutputs),
        returnValue: <_i5.AssetId>[],
        returnValueForMissingStub: <_i5.AssetId>[],
      ) as Iterable<_i5.AssetId>);
  @override
  _i8.Future<_i7.PackageConfig> get packageConfig => (super.noSuchMethod(
        Invocation.getter(#packageConfig),
        returnValue: _i8.Future<_i7.PackageConfig>.value(_FakePackageConfig_9(
          this,
          Invocation.getter(#packageConfig),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.PackageConfig>.value(_FakePackageConfig_9(
          this,
          Invocation.getter(#packageConfig),
        )),
      ) as _i8.Future<_i7.PackageConfig>);
  @override
  _i8.Future<T> fetchResource<T>(_i5.Resource<T>? resource) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchResource,
          [resource],
        ),
        returnValue: _i16.ifNotNull(
              _i16.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #fetchResource,
                  [resource],
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_10<T>(
              this,
              Invocation.method(
                #fetchResource,
                [resource],
              ),
            ),
        returnValueForMissingStub: _i16.ifNotNull(
              _i16.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #fetchResource,
                  [resource],
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_10<T>(
              this,
              Invocation.method(
                #fetchResource,
                [resource],
              ),
            ),
      ) as _i8.Future<T>);
  @override
  _i8.Future<void> writeAsBytes(
    _i5.AssetId? id,
    _i8.FutureOr<List<int>>? bytes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsBytes,
          [
            id,
            bytes,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> writeAsString(
    _i5.AssetId? id,
    _i8.FutureOr<String>? contents, {
    _i17.Encoding? encoding = const _i17.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsString,
          [
            id,
            contents,
          ],
          {#encoding: encoding},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  T trackStage<T>(
    String? label,
    T Function()? action, {
    bool? isExternal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackStage,
          [
            label,
            action,
          ],
          {#isExternal: isExternal},
        ),
        returnValue: _i16.dummyValue<T>(
          this,
          Invocation.method(
            #trackStage,
            [
              label,
              action,
            ],
            {#isExternal: isExternal},
          ),
        ),
        returnValueForMissingStub: _i16.dummyValue<T>(
          this,
          Invocation.method(
            #trackStage,
            [
              label,
              action,
            ],
            {#isExternal: isExternal},
          ),
        ),
      ) as T);
  @override
  void reportUnusedAssets(Iterable<_i5.AssetId>? ids) => super.noSuchMethod(
        Invocation.method(
          #reportUnusedAssets,
          [ids],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<List<int>> readAsBytes(_i5.AssetId? id) => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [id],
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);
  @override
  _i8.Future<String> readAsString(
    _i5.AssetId? id, {
    _i17.Encoding? encoding = const _i17.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [id],
          {#encoding: encoding},
        ),
        returnValue: _i8.Future<String>.value(''),
        returnValueForMissingStub: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
  @override
  _i8.Future<bool> canRead(_i5.AssetId? id) => (super.noSuchMethod(
        Invocation.method(
          #canRead,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Stream<_i5.AssetId> findAssets(_i18.Glob? glob) => (super.noSuchMethod(
        Invocation.method(
          #findAssets,
          [glob],
        ),
        returnValue: _i8.Stream<_i5.AssetId>.empty(),
        returnValueForMissingStub: _i8.Stream<_i5.AssetId>.empty(),
      ) as _i8.Stream<_i5.AssetId>);
  @override
  _i8.Future<_i9.Digest> digest(_i5.AssetId? id) => (super.noSuchMethod(
        Invocation.method(
          #digest,
          [id],
        ),
        returnValue: _i8.Future<_i9.Digest>.value(_FakeDigest_11(
          this,
          Invocation.method(
            #digest,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i9.Digest>.value(_FakeDigest_11(
          this,
          Invocation.method(
            #digest,
            [id],
          ),
        )),
      ) as _i8.Future<_i9.Digest>);
}

/// A class which mocks [MethodElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodElement extends _i1.Mock implements _i6.MethodElement {
  @override
  _i6.MethodElement get declaration => (super.noSuchMethod(
        Invocation.getter(#declaration),
        returnValue: _FakeMethodElement_12(
          this,
          Invocation.getter(#declaration),
        ),
        returnValueForMissingStub: _FakeMethodElement_12(
          this,
          Invocation.getter(#declaration),
        ),
      ) as _i6.MethodElement);
  @override
  _i6.Element get enclosingElement => (super.noSuchMethod(
        Invocation.getter(#enclosingElement),
        returnValue: _FakeElement_13(
          this,
          Invocation.getter(#enclosingElement),
        ),
        returnValueForMissingStub: _FakeElement_13(
          this,
          Invocation.getter(#enclosingElement),
        ),
      ) as _i6.Element);
  @override
  _i6.Element get enclosingElement3 => (super.noSuchMethod(
        Invocation.getter(#enclosingElement3),
        returnValue: _FakeElement_13(
          this,
          Invocation.getter(#enclosingElement3),
        ),
        returnValueForMissingStub: _FakeElement_13(
          this,
          Invocation.getter(#enclosingElement3),
        ),
      ) as _i6.Element);
  @override
  bool get isStatic => (super.noSuchMethod(
        Invocation.getter(#isStatic),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i6.Element> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i6.Element>[],
        returnValueForMissingStub: <_i6.Element>[],
      ) as List<_i6.Element>);
  @override
  _i10.AnalysisContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeAnalysisContext_14(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeAnalysisContext_14(
          this,
          Invocation.getter(#context),
        ),
      ) as _i10.AnalysisContext);
  @override
  String get displayName => (super.noSuchMethod(
        Invocation.getter(#displayName),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool get hasAlwaysThrows => (super.noSuchMethod(
        Invocation.getter(#hasAlwaysThrows),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasDeprecated => (super.noSuchMethod(
        Invocation.getter(#hasDeprecated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasDoNotStore => (super.noSuchMethod(
        Invocation.getter(#hasDoNotStore),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasFactory => (super.noSuchMethod(
        Invocation.getter(#hasFactory),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasInternal => (super.noSuchMethod(
        Invocation.getter(#hasInternal),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasIsTest => (super.noSuchMethod(
        Invocation.getter(#hasIsTest),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasIsTestGroup => (super.noSuchMethod(
        Invocation.getter(#hasIsTestGroup),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasJS => (super.noSuchMethod(
        Invocation.getter(#hasJS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasLiteral => (super.noSuchMethod(
        Invocation.getter(#hasLiteral),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasMustBeOverridden => (super.noSuchMethod(
        Invocation.getter(#hasMustBeOverridden),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasMustCallSuper => (super.noSuchMethod(
        Invocation.getter(#hasMustCallSuper),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasNonVirtual => (super.noSuchMethod(
        Invocation.getter(#hasNonVirtual),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasOptionalTypeArgs => (super.noSuchMethod(
        Invocation.getter(#hasOptionalTypeArgs),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasOverride => (super.noSuchMethod(
        Invocation.getter(#hasOverride),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasProtected => (super.noSuchMethod(
        Invocation.getter(#hasProtected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasReopen => (super.noSuchMethod(
        Invocation.getter(#hasReopen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasRequired => (super.noSuchMethod(
        Invocation.getter(#hasRequired),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasSealed => (super.noSuchMethod(
        Invocation.getter(#hasSealed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasUseResult => (super.noSuchMethod(
        Invocation.getter(#hasUseResult),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasVisibleForOverriding => (super.noSuchMethod(
        Invocation.getter(#hasVisibleForOverriding),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasVisibleForTemplate => (super.noSuchMethod(
        Invocation.getter(#hasVisibleForTemplate),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasVisibleForTesting => (super.noSuchMethod(
        Invocation.getter(#hasVisibleForTesting),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get isPrivate => (super.noSuchMethod(
        Invocation.getter(#isPrivate),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isPublic => (super.noSuchMethod(
        Invocation.getter(#isPublic),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isSynthetic => (super.noSuchMethod(
        Invocation.getter(#isSynthetic),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.ElementKind get kind => (super.noSuchMethod(
        Invocation.getter(#kind),
        returnValue: _FakeElementKind_15(
          this,
          Invocation.getter(#kind),
        ),
        returnValueForMissingStub: _FakeElementKind_15(
          this,
          Invocation.getter(#kind),
        ),
      ) as _i6.ElementKind);
  @override
  _i6.LibraryElement get library => (super.noSuchMethod(
        Invocation.getter(#library),
        returnValue: _FakeLibraryElement_7(
          this,
          Invocation.getter(#library),
        ),
        returnValueForMissingStub: _FakeLibraryElement_7(
          this,
          Invocation.getter(#library),
        ),
      ) as _i6.LibraryElement);
  @override
  List<_i6.ElementAnnotation> get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: <_i6.ElementAnnotation>[],
        returnValueForMissingStub: <_i6.ElementAnnotation>[],
      ) as List<_i6.ElementAnnotation>);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  int get nameLength => (super.noSuchMethod(
        Invocation.getter(#nameLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get nameOffset => (super.noSuchMethod(
        Invocation.getter(#nameOffset),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i6.Element get nonSynthetic => (super.noSuchMethod(
        Invocation.getter(#nonSynthetic),
        returnValue: _FakeElement_13(
          this,
          Invocation.getter(#nonSynthetic),
        ),
        returnValueForMissingStub: _FakeElement_13(
          this,
          Invocation.getter(#nonSynthetic),
        ),
      ) as _i6.Element);
  @override
  _i11.Source get source => (super.noSuchMethod(
        Invocation.getter(#source),
        returnValue: _FakeSource_16(
          this,
          Invocation.getter(#source),
        ),
        returnValueForMissingStub: _FakeSource_16(
          this,
          Invocation.getter(#source),
        ),
      ) as _i11.Source);
  @override
  _i11.Source get librarySource => (super.noSuchMethod(
        Invocation.getter(#librarySource),
        returnValue: _FakeSource_16(
          this,
          Invocation.getter(#librarySource),
        ),
        returnValueForMissingStub: _FakeSource_16(
          this,
          Invocation.getter(#librarySource),
        ),
      ) as _i11.Source);
  @override
  bool get hasImplicitReturnType => (super.noSuchMethod(
        Invocation.getter(#hasImplicitReturnType),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isAbstract => (super.noSuchMethod(
        Invocation.getter(#isAbstract),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isAsynchronous => (super.noSuchMethod(
        Invocation.getter(#isAsynchronous),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isExternal => (super.noSuchMethod(
        Invocation.getter(#isExternal),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isGenerator => (super.noSuchMethod(
        Invocation.getter(#isGenerator),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isOperator => (super.noSuchMethod(
        Invocation.getter(#isOperator),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isSynchronous => (super.noSuchMethod(
        Invocation.getter(#isSynchronous),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i6.ParameterElement> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <_i6.ParameterElement>[],
        returnValueForMissingStub: <_i6.ParameterElement>[],
      ) as List<_i6.ParameterElement>);
  @override
  _i4.DartType get returnType => (super.noSuchMethod(
        Invocation.getter(#returnType),
        returnValue: _FakeDartType_3(
          this,
          Invocation.getter(#returnType),
        ),
        returnValueForMissingStub: _FakeDartType_3(
          this,
          Invocation.getter(#returnType),
        ),
      ) as _i4.DartType);
  @override
  _i4.FunctionType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _FakeFunctionType_17(
          this,
          Invocation.getter(#type),
        ),
        returnValueForMissingStub: _FakeFunctionType_17(
          this,
          Invocation.getter(#type),
        ),
      ) as _i4.FunctionType);
  @override
  bool get isSimplyBounded => (super.noSuchMethod(
        Invocation.getter(#isSimplyBounded),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i6.TypeParameterElement> get typeParameters => (super.noSuchMethod(
        Invocation.getter(#typeParameters),
        returnValue: <_i6.TypeParameterElement>[],
        returnValueForMissingStub: <_i6.TypeParameterElement>[],
      ) as List<_i6.TypeParameterElement>);
  @override
  T? accept<T>(_i6.ElementVisitor<T>? visitor) => (super.noSuchMethod(
        Invocation.method(
          #accept,
          [visitor],
        ),
        returnValueForMissingStub: null,
      ) as T?);
  @override
  String getDisplayString({
    required bool? withNullability,
    bool? multiline = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDisplayString,
          [],
          {
            #withNullability: withNullability,
            #multiline: multiline,
          },
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String getExtendedDisplayName(String? shortName) => (super.noSuchMethod(
        Invocation.method(
          #getExtendedDisplayName,
          [shortName],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool isAccessibleIn(_i6.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn,
          [library],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isAccessibleIn2(_i6.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn2,
          [library],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  E? thisOrAncestorMatching<E extends _i6.Element>(
          bool Function(_i6.Element)? predicate) =>
      (super.noSuchMethod(
        Invocation.method(
          #thisOrAncestorMatching,
          [predicate],
        ),
        returnValueForMissingStub: null,
      ) as E?);
  @override
  void visitChildren(_i6.ElementVisitor<dynamic>? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitChildren,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ClassElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassElement extends _i1.Mock implements _i6.ClassElement {
  @override
  _i6.AugmentedClassElement get augmented => (super.noSuchMethod(
        Invocation.getter(#augmented),
        returnValue: _FakeAugmentedClassElement_18(
          this,
          Invocation.getter(#augmented),
        ),
        returnValueForMissingStub: _FakeAugmentedClassElement_18(
          this,
          Invocation.getter(#augmented),
        ),
      ) as _i6.AugmentedClassElement);
  @override
  bool get hasNonFinalField => (super.noSuchMethod(
        Invocation.getter(#hasNonFinalField),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isAbstract => (super.noSuchMethod(
        Invocation.getter(#isAbstract),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isBase => (super.noSuchMethod(
        Invocation.getter(#isBase),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isConstructable => (super.noSuchMethod(
        Invocation.getter(#isConstructable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isDartCoreEnum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreEnum),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isDartCoreObject => (super.noSuchMethod(
        Invocation.getter(#isDartCoreObject),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isExhaustive => (super.noSuchMethod(
        Invocation.getter(#isExhaustive),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isFinal => (super.noSuchMethod(
        Invocation.getter(#isFinal),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isInterface => (super.noSuchMethod(
        Invocation.getter(#isInterface),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isMixinApplication => (super.noSuchMethod(
        Invocation.getter(#isMixinApplication),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isMixinClass => (super.noSuchMethod(
        Invocation.getter(#isMixinClass),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isSealed => (super.noSuchMethod(
        Invocation.getter(#isSealed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isValidMixin => (super.noSuchMethod(
        Invocation.getter(#isValidMixin),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i4.InterfaceType> get superclassConstraints => (super.noSuchMethod(
        Invocation.getter(#superclassConstraints),
        returnValue: <_i4.InterfaceType>[],
        returnValueForMissingStub: <_i4.InterfaceType>[],
      ) as List<_i4.InterfaceType>);
  @override
  List<_i6.PropertyAccessorElement> get accessors => (super.noSuchMethod(
        Invocation.getter(#accessors),
        returnValue: <_i6.PropertyAccessorElement>[],
        returnValueForMissingStub: <_i6.PropertyAccessorElement>[],
      ) as List<_i6.PropertyAccessorElement>);
  @override
  List<_i6.ConstructorElement> get constructors => (super.noSuchMethod(
        Invocation.getter(#constructors),
        returnValue: <_i6.ConstructorElement>[],
        returnValueForMissingStub: <_i6.ConstructorElement>[],
      ) as List<_i6.ConstructorElement>);
  @override
  _i6.CompilationUnitElement get enclosingElement => (super.noSuchMethod(
        Invocation.getter(#enclosingElement),
        returnValue: _FakeCompilationUnitElement_19(
          this,
          Invocation.getter(#enclosingElement),
        ),
        returnValueForMissingStub: _FakeCompilationUnitElement_19(
          this,
          Invocation.getter(#enclosingElement),
        ),
      ) as _i6.CompilationUnitElement);
  @override
  _i6.CompilationUnitElement get enclosingElement3 => (super.noSuchMethod(
        Invocation.getter(#enclosingElement3),
        returnValue: _FakeCompilationUnitElement_19(
          this,
          Invocation.getter(#enclosingElement3),
        ),
        returnValueForMissingStub: _FakeCompilationUnitElement_19(
          this,
          Invocation.getter(#enclosingElement3),
        ),
      ) as _i6.CompilationUnitElement);
  @override
  List<_i6.FieldElement> get fields => (super.noSuchMethod(
        Invocation.getter(#fields),
        returnValue: <_i6.FieldElement>[],
        returnValueForMissingStub: <_i6.FieldElement>[],
      ) as List<_i6.FieldElement>);
  @override
  List<_i4.InterfaceType> get interfaces => (super.noSuchMethod(
        Invocation.getter(#interfaces),
        returnValue: <_i4.InterfaceType>[],
        returnValueForMissingStub: <_i4.InterfaceType>[],
      ) as List<_i4.InterfaceType>);
  @override
  List<_i6.MethodElement> get methods => (super.noSuchMethod(
        Invocation.getter(#methods),
        returnValue: <_i6.MethodElement>[],
        returnValueForMissingStub: <_i6.MethodElement>[],
      ) as List<_i6.MethodElement>);
  @override
  List<_i4.InterfaceType> get mixins => (super.noSuchMethod(
        Invocation.getter(#mixins),
        returnValue: <_i4.InterfaceType>[],
        returnValueForMissingStub: <_i4.InterfaceType>[],
      ) as List<_i4.InterfaceType>);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool get isSimplyBounded => (super.noSuchMethod(
        Invocation.getter(#isSimplyBounded),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i6.TypeParameterElement> get typeParameters => (super.noSuchMethod(
        Invocation.getter(#typeParameters),
        returnValue: <_i6.TypeParameterElement>[],
        returnValueForMissingStub: <_i6.TypeParameterElement>[],
      ) as List<_i6.TypeParameterElement>);
  @override
  _i6.Element get declaration => (super.noSuchMethod(
        Invocation.getter(#declaration),
        returnValue: _FakeElement_13(
          this,
          Invocation.getter(#declaration),
        ),
        returnValueForMissingStub: _FakeElement_13(
          this,
          Invocation.getter(#declaration),
        ),
      ) as _i6.Element);
  @override
  _i6.LibraryElement get library => (super.noSuchMethod(
        Invocation.getter(#library),
        returnValue: _FakeLibraryElement_7(
          this,
          Invocation.getter(#library),
        ),
        returnValueForMissingStub: _FakeLibraryElement_7(
          this,
          Invocation.getter(#library),
        ),
      ) as _i6.LibraryElement);
  @override
  _i11.Source get librarySource => (super.noSuchMethod(
        Invocation.getter(#librarySource),
        returnValue: _FakeSource_16(
          this,
          Invocation.getter(#librarySource),
        ),
        returnValueForMissingStub: _FakeSource_16(
          this,
          Invocation.getter(#librarySource),
        ),
      ) as _i11.Source);
  @override
  _i11.Source get source => (super.noSuchMethod(
        Invocation.getter(#source),
        returnValue: _FakeSource_16(
          this,
          Invocation.getter(#source),
        ),
        returnValueForMissingStub: _FakeSource_16(
          this,
          Invocation.getter(#source),
        ),
      ) as _i11.Source);
  @override
  List<_i6.Element> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i6.Element>[],
        returnValueForMissingStub: <_i6.Element>[],
      ) as List<_i6.Element>);
  @override
  _i10.AnalysisContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeAnalysisContext_14(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeAnalysisContext_14(
          this,
          Invocation.getter(#context),
        ),
      ) as _i10.AnalysisContext);
  @override
  String get displayName => (super.noSuchMethod(
        Invocation.getter(#displayName),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool get hasAlwaysThrows => (super.noSuchMethod(
        Invocation.getter(#hasAlwaysThrows),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasDeprecated => (super.noSuchMethod(
        Invocation.getter(#hasDeprecated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasDoNotStore => (super.noSuchMethod(
        Invocation.getter(#hasDoNotStore),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasFactory => (super.noSuchMethod(
        Invocation.getter(#hasFactory),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasInternal => (super.noSuchMethod(
        Invocation.getter(#hasInternal),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasIsTest => (super.noSuchMethod(
        Invocation.getter(#hasIsTest),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasIsTestGroup => (super.noSuchMethod(
        Invocation.getter(#hasIsTestGroup),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasJS => (super.noSuchMethod(
        Invocation.getter(#hasJS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasLiteral => (super.noSuchMethod(
        Invocation.getter(#hasLiteral),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasMustBeOverridden => (super.noSuchMethod(
        Invocation.getter(#hasMustBeOverridden),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasMustCallSuper => (super.noSuchMethod(
        Invocation.getter(#hasMustCallSuper),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasNonVirtual => (super.noSuchMethod(
        Invocation.getter(#hasNonVirtual),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasOptionalTypeArgs => (super.noSuchMethod(
        Invocation.getter(#hasOptionalTypeArgs),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasOverride => (super.noSuchMethod(
        Invocation.getter(#hasOverride),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasProtected => (super.noSuchMethod(
        Invocation.getter(#hasProtected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasReopen => (super.noSuchMethod(
        Invocation.getter(#hasReopen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasRequired => (super.noSuchMethod(
        Invocation.getter(#hasRequired),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasSealed => (super.noSuchMethod(
        Invocation.getter(#hasSealed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasUseResult => (super.noSuchMethod(
        Invocation.getter(#hasUseResult),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasVisibleForOverriding => (super.noSuchMethod(
        Invocation.getter(#hasVisibleForOverriding),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasVisibleForTemplate => (super.noSuchMethod(
        Invocation.getter(#hasVisibleForTemplate),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasVisibleForTesting => (super.noSuchMethod(
        Invocation.getter(#hasVisibleForTesting),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get isPrivate => (super.noSuchMethod(
        Invocation.getter(#isPrivate),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isPublic => (super.noSuchMethod(
        Invocation.getter(#isPublic),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isSynthetic => (super.noSuchMethod(
        Invocation.getter(#isSynthetic),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.ElementKind get kind => (super.noSuchMethod(
        Invocation.getter(#kind),
        returnValue: _FakeElementKind_15(
          this,
          Invocation.getter(#kind),
        ),
        returnValueForMissingStub: _FakeElementKind_15(
          this,
          Invocation.getter(#kind),
        ),
      ) as _i6.ElementKind);
  @override
  List<_i6.ElementAnnotation> get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: <_i6.ElementAnnotation>[],
        returnValueForMissingStub: <_i6.ElementAnnotation>[],
      ) as List<_i6.ElementAnnotation>);
  @override
  int get nameLength => (super.noSuchMethod(
        Invocation.getter(#nameLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get nameOffset => (super.noSuchMethod(
        Invocation.getter(#nameOffset),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i6.Element get nonSynthetic => (super.noSuchMethod(
        Invocation.getter(#nonSynthetic),
        returnValue: _FakeElement_13(
          this,
          Invocation.getter(#nonSynthetic),
        ),
        returnValueForMissingStub: _FakeElement_13(
          this,
          Invocation.getter(#nonSynthetic),
        ),
      ) as _i6.Element);
  @override
  List<_i4.InterfaceType> get allSupertypes => (super.noSuchMethod(
        Invocation.getter(#allSupertypes),
        returnValue: <_i4.InterfaceType>[],
        returnValueForMissingStub: <_i4.InterfaceType>[],
      ) as List<_i4.InterfaceType>);
  @override
  _i4.InterfaceType get thisType => (super.noSuchMethod(
        Invocation.getter(#thisType),
        returnValue: _FakeInterfaceType_20(
          this,
          Invocation.getter(#thisType),
        ),
        returnValueForMissingStub: _FakeInterfaceType_20(
          this,
          Invocation.getter(#thisType),
        ),
      ) as _i4.InterfaceType);
  @override
  bool isExtendableIn(_i6.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isExtendableIn,
          [library],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isImplementableIn(_i6.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isImplementableIn,
          [library],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isMixableIn(_i6.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isMixableIn,
          [library],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  T? accept<T>(_i6.ElementVisitor<T>? visitor) => (super.noSuchMethod(
        Invocation.method(
          #accept,
          [visitor],
        ),
        returnValueForMissingStub: null,
      ) as T?);
  @override
  String getDisplayString({
    required bool? withNullability,
    bool? multiline = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDisplayString,
          [],
          {
            #withNullability: withNullability,
            #multiline: multiline,
          },
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String getExtendedDisplayName(String? shortName) => (super.noSuchMethod(
        Invocation.method(
          #getExtendedDisplayName,
          [shortName],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool isAccessibleIn(_i6.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn,
          [library],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isAccessibleIn2(_i6.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn2,
          [library],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  E? thisOrAncestorMatching<E extends _i6.Element>(
          bool Function(_i6.Element)? predicate) =>
      (super.noSuchMethod(
        Invocation.method(
          #thisOrAncestorMatching,
          [predicate],
        ),
        returnValueForMissingStub: null,
      ) as E?);
  @override
  void visitChildren(_i6.ElementVisitor<dynamic>? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitChildren,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.FieldElement? getField(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getField,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as _i6.FieldElement?);
  @override
  _i6.PropertyAccessorElement? getGetter(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getGetter,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as _i6.PropertyAccessorElement?);
  @override
  _i6.MethodElement? getMethod(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getMethod,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as _i6.MethodElement?);
  @override
  _i6.ConstructorElement? getNamedConstructor(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNamedConstructor,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as _i6.ConstructorElement?);
  @override
  _i6.PropertyAccessorElement? getSetter(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getSetter,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as _i6.PropertyAccessorElement?);
  @override
  _i4.InterfaceType instantiate({
    required List<_i4.DartType>? typeArguments,
    required _i19.NullabilitySuffix? nullabilitySuffix,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #instantiate,
          [],
          {
            #typeArguments: typeArguments,
            #nullabilitySuffix: nullabilitySuffix,
          },
        ),
        returnValue: _FakeInterfaceType_20(
          this,
          Invocation.method(
            #instantiate,
            [],
            {
              #typeArguments: typeArguments,
              #nullabilitySuffix: nullabilitySuffix,
            },
          ),
        ),
        returnValueForMissingStub: _FakeInterfaceType_20(
          this,
          Invocation.method(
            #instantiate,
            [],
            {
              #typeArguments: typeArguments,
              #nullabilitySuffix: nullabilitySuffix,
            },
          ),
        ),
      ) as _i4.InterfaceType);
  @override
  _i6.MethodElement? lookUpConcreteMethod(
    String? methodName,
    _i6.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lookUpConcreteMethod,
          [
            methodName,
            library,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i6.MethodElement?);
  @override
  _i6.PropertyAccessorElement? lookUpGetter(
    String? getterName,
    _i6.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lookUpGetter,
          [
            getterName,
            library,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i6.PropertyAccessorElement?);
  @override
  _i6.PropertyAccessorElement? lookUpInheritedConcreteGetter(
    String? getterName,
    _i6.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lookUpInheritedConcreteGetter,
          [
            getterName,
            library,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i6.PropertyAccessorElement?);
  @override
  _i6.MethodElement? lookUpInheritedConcreteMethod(
    String? methodName,
    _i6.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lookUpInheritedConcreteMethod,
          [
            methodName,
            library,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i6.MethodElement?);
  @override
  _i6.PropertyAccessorElement? lookUpInheritedConcreteSetter(
    String? setterName,
    _i6.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lookUpInheritedConcreteSetter,
          [
            setterName,
            library,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i6.PropertyAccessorElement?);
  @override
  _i6.MethodElement? lookUpInheritedMethod(
    String? methodName,
    _i6.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lookUpInheritedMethod,
          [
            methodName,
            library,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i6.MethodElement?);
  @override
  _i6.MethodElement? lookUpMethod(
    String? methodName,
    _i6.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lookUpMethod,
          [
            methodName,
            library,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i6.MethodElement?);
  @override
  _i6.PropertyAccessorElement? lookUpSetter(
    String? setterName,
    _i6.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lookUpSetter,
          [
            setterName,
            library,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i6.PropertyAccessorElement?);
}

/// A class which mocks [Process].
///
/// See the documentation for Mockito's code generation for more information.
class MockProcess extends _i1.Mock implements _i12.Process {
  @override
  _i8.Future<int> get exitCode => (super.noSuchMethod(
        Invocation.getter(#exitCode),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i8.Stream<List<int>> get stdout => (super.noSuchMethod(
        Invocation.getter(#stdout),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);
  @override
  _i8.Stream<List<int>> get stderr => (super.noSuchMethod(
        Invocation.getter(#stderr),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);
  @override
  _i12.IOSink get stdin => (super.noSuchMethod(
        Invocation.getter(#stdin),
        returnValue: _FakeIOSink_21(
          this,
          Invocation.getter(#stdin),
        ),
        returnValueForMissingStub: _FakeIOSink_21(
          this,
          Invocation.getter(#stdin),
        ),
      ) as _i12.IOSink);
  @override
  int get pid => (super.noSuchMethod(
        Invocation.getter(#pid),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool kill([_i12.ProcessSignal? signal = _i12.ProcessSignal.sigterm]) =>
      (super.noSuchMethod(
        Invocation.method(
          #kill,
          [signal],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
